# High Availability Keycloak Configuration
# Production-ready values for Bitnami Keycloak Helm Chart

## Global Configuration
global:
  imageRegistry: ""
  imagePullSecrets: []
  defaultStorageClass: ""

## Common Parameters
nameOverride: ""
fullnameOverride: ""
commonLabels: {}
commonAnnotations: {}

## Keycloak Configuration
# High Availability: 3 replicas
replicaCount: 1

# Production mode enabled
production: true

# Enable proxy headers for ingress
proxyHeaders: "xforwarded"

# Admin realm
adminRealm: "master"

## Image Configuration
image:
  registry: docker.io
  repository: bitnami/keycloak
  tag: 26.2.4-debian-12-r0
  pullPolicy: IfNotPresent
  pullSecrets: []
  debug: false

## Authentication Configuration
auth:
  adminUser: admin
  adminPassword: "admin"  # Will use existing secret
  existingSecret: "keycloak-admin-secret"
  passwordSecretKey: "admin-password"
  annotations: {}

## TLS Configuration
tls:
  enabled: true
  autoGenerated: true
  existingSecret: ""
  usePem: true
  keystorePassword: ""
  truststorePassword: ""

## Cache Configuration (Infinispan for clustering)
cache:
  enabled: true
  stack: kubernetes
  configFile: "cache-ispn.xml"

## Logging Configuration
logging:
  output: default
  level: INFO

## Container Ports
containerPorts:
  http: 8080
  https: 8443
  metrics: 9000

## Security Context
podSecurityContext:
  enabled: true
  fsGroupChangePolicy: Always
  sysctls: []
  supplementalGroups: []
  fsGroup: 1001

containerSecurityContext:
  enabled: true
  seLinuxOptions: {}
  runAsUser: 1001
  runAsGroup: 1001
  runAsNonRoot: true
  privileged: false
  readOnlyRootFilesystem: true
  allowPrivilegeEscalation: false
  capabilities:
    drop: ["ALL"]
  seccompProfile:
    type: "RuntimeDefault"

## Resource Configuration
resources:
  limits:
    cpu: 2000m
    memory: 2Gi
  requests:
    cpu: 1000m
    memory: 1Gi

## Health Probes
livenessProbe:
  enabled: true
  initialDelaySeconds: 300
  periodSeconds: 30
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1

readinessProbe:
  enabled: true
  initialDelaySeconds: 60
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1

startupProbe:
  enabled: true
  initialDelaySeconds: 60
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 60
  successThreshold: 1

## Pod Configuration
podLabels:
  app: keycloak
  version: "26.2.4"

podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "9000"
  prometheus.io/path: "/metrics"

## Affinity and Anti-Affinity
podAntiAffinityPreset: hard

affinity:
  podAntiAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchLabels:
            app.kubernetes.io/name: keycloak
            app.kubernetes.io/instance: keycloak
        topologyKey: kubernetes.io/hostname

nodeSelector: {}
tolerations: []

## Update Strategy
updateStrategy:
  type: RollingUpdate
  rollingUpdate:
    maxUnavailable: 1
    maxSurge: 0

## Service Configuration
service:
  type: ClusterIP
  http:
    enabled: true
  ports:
    http: 80
    https: 443
  sessionAffinity: None
  annotations: {}

# ## Ingress Configuration
# ingress:
#   enabled: true
#   ingressClassName: "nginx"  # Adjust based on your ingress controller
#   pathType: Prefix
#   hostname: keycloak.marouanedbibih.studio
#   path: /
#   servicePort: http
#   annotations:
#     # Cert-Manager annotations
#     cert-manager.io/cluster-issuer: "letsencrypt-prod"
#     cert-manager.io/acme-challenge-type: "http01"
    
#     # Nginx specific annotations
#     nginx.ingress.kubernetes.io/proxy-buffer-size: "16k"
#     nginx.ingress.kubernetes.io/proxy-buffers-number: "8"
#     nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
#     nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
#     nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
#     nginx.ingress.kubernetes.io/ssl-redirect: "true"
#     nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    
#     # Security headers
#     nginx.ingress.kubernetes.io/server-snippet: |
#       add_header X-Frame-Options "SAMEORIGIN" always;
#       add_header X-Content-Type-Options "nosniff" always;
#       add_header X-XSS-Protection "1; mode=block" always;
#       add_header Referrer-Policy "strict-origin-when-cross-origin" always;

#   tls: true
#   selfSigned: false
#   extraHosts: []
#   extraPaths: []
#   extraTls: []
#   secrets: []

## Network Policy
networkPolicy:
  enabled: true
  allowExternal: true
  allowExternalEgress: true

## Service Account
serviceAccount:
  create: true
  name: ""
  automountServiceAccountToken: false
  annotations: {}

## RBAC
rbac:
  create: true
  rules: []

## Pod Disruption Budget
pdb:
  create: true
  minAvailable: 2  # Ensure at least 2 pods available during updates
  maxUnavailable: ""

## Autoscaling
autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 5
  targetCPU: 70
  targetMemory: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 120
      selectPolicy: Max
      policies:
        - type: Percent
          value: 50
          periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 300
      selectPolicy: Max
      policies:
        - type: Pods
          value: 1
          periodSeconds: 300

## Metrics Configuration
metrics:
  enabled: true
  service:
    ports:
      http: 8080
      https: 8443
      metrics: 9000
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "9000"
      prometheus.io/path: "/metrics"

  serviceMonitor:
    enabled: false  # Enable if using Prometheus Operator
    port: metrics
    scheme: http
    interval: 30s
    scrapeTimeout: 10s
    path: /metrics

## PostgreSQL Configuration
postgresql:
  enabled: true
  auth:
    postgresPassword: "postgres"  # Will be auto-generated
    username: keycloak
    password: "postgres"  # Will be auto-generated
    database: keycloak
    existingSecret: ""
  architecture: standalone
  
  # Primary configuration
  primary:
    persistence:
      enabled: true
      size: 10Gi
      storageClass: ""  # Use default storage class
      accessModes:
        - ReadWriteMany
    
    resources:
      limits:
        cpu: 1000m
        memory: 1Gi
      requests:
        cpu: 500m
        memory: 512Mi
    
    # PostgreSQL configuration
    pgHbaConfiguration: |
      local all all trust
      host all all 127.0.0.1/32 trust
      host all all ::1/128 trust
      host all all 0.0.0.0/0 md5
    
    postgresqlConfiguration:
      max_connections: "200"
      shared_buffers: "256MB"
      effective_cache_size: "1GB"
      maintenance_work_mem: "64MB"
      checkpoint_completion_target: "0.9"
      wal_buffers: "16MB"
      default_statistics_target: "100"
      random_page_cost: "1.1"
      effective_io_concurrency: "200"

## Keycloak Config CLI (Optional - for initial realm setup)
keycloakConfigCli:
  enabled: false  # Enable if you want to configure realms automatically
  
## Diagnostic mode (disable for production)
diagnosticMode:
  enabled: false

## Extra environment variables
extraEnvVars:
  - name: KC_LOG_LEVEL
    value: "INFO"
  - name: KC_METRICS_ENABLED
    value: "true"
  - name: KEYCLOAK_PRODUCTION
    value: "true"
  - name: KC_PROXY
    value: "edge"
  - name: KC_HOSTNAME_STRICT
    value: "false"
  - name: KC_HOSTNAME_STRICT_HTTPS
    value: "false"