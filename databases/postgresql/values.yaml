# Production-Ready PostgreSQL Configuration
# Based on Bitnami PostgreSQL Helm Chart

global:
  imageRegistry: ""
  imagePullSecrets: []
  defaultStorageClass: ""
  storageClass: ""
  security:
    allowInsecureImages: false
  # compatibility:
  #   openshift:
  #     adaptSecurityContext: auto

# PostgreSQL Authentication Configuration
auth:
  enablePostgresUser: true
  # IMPORTANT: Set strong passwords for production
  postgresPassword: "postgres"
  username: "marouane"
  password: "marouanedbibih2001!"
  database: "marouan_db"
  replicationUsername: repl_user
  replicationPassword: "marouanepassword"
  existingSecret: ""
  secretKeys:
    adminPasswordKey: postgres-password
    userPasswordKey: password
    replicationPasswordKey: replication-password
  usePasswordFiles: true

# Architecture - standalone for single instance
architecture: standalone

# Container configuration
containerPorts:
  postgresql: 5432

# Image configuration
image:
  registry: docker.io
  repository: bitnami/postgresql
  tag: 17.5.0-debian-12-r3
  digest: ""
  pullPolicy: IfNotPresent
  pullSecrets: []
  debug: false

# PostgreSQL configuration
postgresqlDataDir: /bitnami/postgresql/data
postgresqlSharedPreloadLibraries: "pgaudit"

# TLS Configuration (recommended for production)
tls:
  enabled: true
  autoGenerated: true
  preferServerCiphers: true
  certificatesSecret: ""
  certFilename: ""
  certKeyFilename: ""
  certCAFilename: ""
  crlFilename: ""

# Shared memory volume
shmVolume:
  enabled: true
  sizeLimit: ""

# Primary PostgreSQL configuration
primary:
  name: primary
  configuration: ""
  pgHbaConfiguration: |
    # Allow connections from pod network (adjust CIDR as needed)
    host all all 10.0.0.0/8 md5
    host all all 172.16.0.0/12 md5
    host all all 192.168.0.0/16 md5
    # Local connections
    local all all trust
    host all all 127.0.0.1/32 trust
    
  existingConfigmap: ""
  extendedConfiguration: |
    # Performance tuning
    shared_buffers = 256MB
    effective_cache_size = 1GB
    maintenance_work_mem = 64MB
    checkpoint_completion_target = 0.9
    wal_buffers = 16MB
    default_statistics_target = 100
    random_page_cost = 1.1
    effective_io_concurrency = 200
    
    # Logging configuration
    log_statement = 'all'
    log_min_duration_statement = 1000
    log_line_prefix = '%t [%p-%l] %q%u@%d '
    
  existingExtendedConfigmap: ""
  
  # Initialize database
  initdb:
    args: ""
    postgresqlWalDir: ""
    scripts: {}
    scriptsConfigMap: ""
    scriptsSecret: ""
    user: ""
    password: ""
  
  # Health probes
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  
  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  
  startupProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 1
    failureThreshold: 15
    successThreshold: 1
  
  # Resource configuration for production
  resourcesPreset: "small"  # Can be: nano, micro, small, medium, large, xlarge, 2xlarge
  resources:
    requests:
      cpu: 500m
      memory: 1Gi
    limits:
      cpu: 1000m
      memory: 2Gi
  
  # Security contexts
  podSecurityContext:
    enabled: true
    fsGroupChangePolicy: Always
    sysctls: []
    supplementalGroups: []
    fsGroup: 1001
  
  containerSecurityContext:
    enabled: true
    seLinuxOptions: {}
    runAsUser: 1001
    runAsGroup: 1001
    runAsNonRoot: true
    privileged: false
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    capabilities:
      drop: ["ALL"]
    seccompProfile:
      type: "RuntimeDefault"
  
  automountServiceAccountToken: false
  
  # Pod placement
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  topologySpreadConstraints: []
  
  # Pod disruption budget
  pdb:
    create: true
    minAvailable: ""
    maxUnavailable: 1
  
  # Network policy
  networkPolicy:
    enabled: true
    allowExternal: true
    allowExternalEgress: true
    extraIngress: []
    extraEgress: []
    ingressNSMatchLabels: {}
    ingressNSPodMatchLabels: {}
  
  # Service configuration
  service:
    type: NodePort
    name: postgresql
    ports:
      postgresql: 5432
    nodePorts:
      postgresql: 30543
    # clusterIP: ""cd
    # labels: {}
    # annotations: {}
    # loadBalancerClass: ""
    # loadBalancerIP: ""
    # externalTrafficPolicy: Cluster
    # loadBalancerSourceRanges: []
    # extraPorts: []
    # sessionAffinity: None
    # sessionAffinityConfig: {}
    
    headless:
      annotations: {}
  
  # Persistence configuration
  persistence:
    enabled: true
    volumeName: "data"
    existingClaim: ""
    mountPath: /bitnami/postgresql
    subPath: ""
    storageClass: ""  # Use default storage class or specify one
    accessModes:
      - ReadWriteOnce
    size: 20Gi  # Increased from 8Gi for production
    annotations: {}
    labels: {}
    selector: {}
    dataSource: {}
  
  # Volume claim retention policy
  persistentVolumeClaimRetentionPolicy:
    enabled: false
    whenScaled: Retain
    whenDeleted: Retain

# Backup configuration
backup:
  enabled: true
  cronjob:
    schedule: "0 2 * * *"  # Daily at 2 AM
    timeZone: ""
    concurrencyPolicy: Allow
    failedJobsHistoryLimit: 1
    successfulJobsHistoryLimit: 3
    startingDeadlineSeconds: ""
    ttlSecondsAfterFinished: ""
    restartPolicy: OnFailure
    
    podSecurityContext:
      enabled: true
      fsGroupChangePolicy: Always
      sysctls: []
      supplementalGroups: []
      fsGroup: 1001
    
    containerSecurityContext:
      enabled: true
      seLinuxOptions: {}
      runAsUser: 1001
      runAsGroup: 1001
      runAsNonRoot: true
      privileged: false
      readOnlyRootFilesystem: true
      allowPrivilegeEscalation: false
      capabilities:
        drop: ["ALL"]
      seccompProfile:
        type: "RuntimeDefault"
    
    command:
      - /bin/bash
      - -c
      - PGPASSWORD="${PGPASSWORD:-$(< "$PGPASSWORD_FILE")}" pg_dumpall --clean --if-exists --load-via-partition-root --quote-all-identifiers --no-password --file="${PGDUMP_DIR}/pg_dumpall-$(date '+%Y-%m-%d-%H-%M').pgdump"
    
    labels: {}
    annotations: {}
    nodeSelector: {}
    tolerations: []
    resourcesPreset: "nano"
    resources: {}
    
    networkPolicy:
      enabled: true
    
    storage:
      enabled: true
      existingClaim: ""
      resourcePolicy: "keep"
      storageClass: ""
      accessModes:
        - ReadWriteOnce
      size: 10Gi
      annotations: {}
      mountPath: /backup/pgdump
      subPath: ""
      volumeClaimTemplates:
        selector: {}

# Monitoring with Prometheus metrics
metrics:
  enabled: true
  image:
    registry: docker.io
    repository: bitnami/postgres-exporter
    tag: 0.17.1-debian-12-r7
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
  
  collectors: {}
  customMetrics: {}
  extraEnvVars: []
  
  containerSecurityContext:
    enabled: true
    seLinuxOptions: {}
    runAsUser: 1001
    runAsGroup: 1001
    runAsNonRoot: true
    privileged: false
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    capabilities:
      drop: ["ALL"]
    seccompProfile:
      type: "RuntimeDefault"
  
  livenessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  
  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  
  startupProbe:
    enabled: false
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 1
    failureThreshold: 15
    successThreshold: 1
  
  containerPorts:
    metrics: 9187
  
  resourcesPreset: "nano"
  resources: {}
  
  service:
    ports:
      metrics: 9187
    clusterIP: ""
    sessionAffinity: None
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "9187"
  
  serviceMonitor:
    enabled: false  # Set to true if using Prometheus Operator
    namespace: ""
    interval: "30s"
    scrapeTimeout: ""
    labels: {}
    selector: {}
    relabelings: []
    metricRelabelings: []
    honorLabels: false
    jobLabel: ""
  
  prometheusRule:
    enabled: false
    namespace: ""
    labels: {}
    rules: []

# Service account configuration
serviceAccount:
  create: true
  name: ""
  automountServiceAccountToken: false
  annotations: {}

# RBAC configuration
rbac:
  create: true
  rules: []

# Diagnostic mode (for troubleshooting)
diagnosticMode:
  enabled: false
  command:
    - sleep
  args:
    - infinity

# Common parameters
nameOverride: ""
fullnameOverride: ""
namespaceOverride: ""
clusterDomain: cluster.local
extraDeploy: []
commonLabels: {}
commonAnnotations: {}
secretAnnotations: {}

